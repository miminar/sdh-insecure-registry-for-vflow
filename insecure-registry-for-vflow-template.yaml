apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: insecure-registry-for-vflow
  annotations:
    openshift.io/display-name: "Insecure registry setter for SAP Data Hub Pipeline Modeler"
    description: >
      In SAP Data Hub 2.5.x releases, it is possible to configure insecure
      registry for Pipeline Modeler (aka vflow pod) neither via installer nor
      in the UI.

      The insecure registry needs to be set if the container registry listens
      on insecure port (HTTP) or the communication is encrypted using a
      self-signed certificate.

      Without the insecure registry set, kaniko builder cannot push built
      images into the configured registry for the Pipeline Modeler (see
      "Container Registry for Pipeline Modeler" Input Parameter at
      https://help.sap.com/viewer/e66c399612e84a83a8abe97c0eeb443a/2.5.latest/en-US/abfa9c73f7704de2907ea7ff65e7a20a.html)

      The registry to mark as insecure will be determined from the
      installer-config secret located in the SDH_NAMESPACE. If another registry
      shall be marked as insecure, it can be specified with an additional
      REGISTRY parameter.

      Usage:
        If running in the same namespace as Data Hub, instantiate the template
        as is in the desired namespace:

          oc project $SDH_NAMESPACE
          oc process insecure-registry-for-vflow | oc create -f -

        If running in a different/new namespace/project, instantiate the
        template with parameters SDH_NAMESPACE and NAMESPACE, e.g.:

          oc new-project sapdatahub-admin
          oc process insecure-registry-for-vflow \
              SDH_NAMESPACE=$SDH_NAMESPACE \
              NAMESPACE=sapdatahub-admin | oc create -f -

    openshift.io/provider-display-name: "Red Hat, Inc." 
    openshift.io/documentation-url: "https://access.redhat.com/articles/3630111" 
message: >-
  The vflow observer and patcher will be started. You can watch the progress
  with the following command:

    oc logs -f dc/vflow-observer
objects:
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: vflow-observer
    namespace: ${NAMESPACE}

- apiVersion: rbac.authorization.k8s.io/v1
  kind: Role
  metadata:
    name: vflow-observer
    namespace: ${SDH_NAMESPACE}
  rules:
  - apiGroups:
    - apps
    - extensions
    resources:
    - deployments
    - deployments/scale
    verbs:
    - get
    - list
    - patch
    - watch
  - apiGroups:
    - ""
    resources:
    # necessary to get the configured registry out of secrets/installer-config
    - secrets
    verbs:
    - get
  # mandatory permissions if running in a different namespace
  - apiGroups:
    - ""
    resources:
    - namespaces
    - namespaces/status
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - ""
    - project.openshift.io
    resources:
    - projects
    verbs:
    - get

- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    namespace: ${SDH_NAMESPACE}
    name: vflow-observer-${ROLE_BINDING_SUFFIX}
  roleRef:
    name: vflow-observer
    kind: Role
    namespace: ${SDH_NAMESPACE}
  subjects:
  - kind: ServiceAccount
    name: vflow-observer
    namespace: ${NAMESPACE}

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: vflow-observer
    namespace: ${NAMESPACE}
    labels:
      name: observer
  spec:
    selector:
      name: observer
    replicas: 1
    strategy:
      type: Rolling
    triggers:
    - type: "ConfigChange"
    template:
      metadata:
        labels:
          name: observer
      spec:
        containers:
        - env:
          - name: REGISTRY
            value: ${REGISTRY}
          - name: SDH_NAMESPACE
            value: ${SDH_NAMESPACE}
          image: "${BASE_IMAGE}:${BASE_IMAGE_TAG}"
          name: observer
          command:
          - /bin/bash
          args:
          - "-c"
          - |
            function join() { local IFS="$1"; shift; echo "$*"; }
            if [[ -n "${SDH_NAMESPACE:-}" ]]; then
              export HOME="$(mktemp -d)"  # so that oc can create $HOME/.kube/ directory
              oc project "${SDH_NAMESPACE}"
            fi
            # support both 3.x and 4.x output formats
            version="$(oc version --short 2>/dev/null || oc version)"
            server_version="$(sed -n 's/^\([sS]erver.*:\|[oO]pen[sS]hift\) v\([0-9]\+\.[0-9]\+\).*/\2/p' \
                              <<<"$version" | head -n 1)"
            client_version="$(sed -n 's/^\([cC]lient.*:\|oc\) v\([0-9]\+\.[0-9]\+\).*/\2/p' \
                              <<<"$version" | head -n 1)"
            if [[ -z "${client_version:-}" ]]; then
              printf 'WARNING: Failed to determine oc client version!\n' >&2
            elif [[ "${server_version}" != "${client_version}" ]]; then
              printf 'WARNING: Client version != Server version (%s != %s).\n' "$client_version" "$server_version" >&2
              printf '         Please reinstantiate this template with the correct BASE_IMAGE_TAG parameter (e.g. v%s)."\n' >&2 \
                "$server_version"
            fi
            registry="${REGISTRY:-}"
            function get_registry() {
              if [[ -z "${registry:-}" ]]; then
                registry="$(oc get secret -o go-template='{{index .data "installer-config.yaml"}}' installer-config | \
                   base64 -d | sed -n 's/^\s*VFLOW_REGISTRY:\s*\(.\+\)/\1/p')"
              fi
              printf '%s\n' "$registry"
            }
            oc observe deploy | while read -r _ _ _ _ _ _ name; do
              [[ -z "${name:-}" || "$(oc get deploy "$name" -o go-template='{{if eq (index .metadata.labels "datahub.sap.com/app") "vflow"}}patch{{end}}')" != patch ]] && continue
                readarray -t vflowargs <<<"$(oc get deploy -o go-template=$'{{range $index, $arg := (index (index .spec.template.spec.containers 0) "args")}}{{$arg}}\n{{end}}' "$name")"
                if ! echo "${vflowargs[@]}" | grep -q -F -- "-insecure-registry=$(get_registry)"; then
                  vflowargs+=( "-insecure-registry=$(get_registry)" )
                  newargs=( )
                  for ((i=0; i<"${#vflowargs[@]}"; i++)) do
                    # escape double qoutes of each argument and surround it with double quotes
                    newargs+=( '"'"$(sed 's/"/\\"/g' <<<"${vflowargs[$i]}")"'"' )
                  done
                  # turn the argument array into a json list of strings
                  newarglist="[$(join , "${newargs[@]}")]"
                  printf 'Patching deployment/%s to treat %s registry as insecure ...\n' "$name" "$registry" >&2
                  oc patch --type json -p '[{"op":"add","path":"/spec/template/spec/containers/0/args","value":'"$newarglist"'}]' deploy "$name"
                else
                  printf 'deployment/%s already patched, skipping ...\n' "$name" >&2
                fi
              done
        restartPolicy: Always
        serviceAccount: vflow-observer
        serviceAccountName: vflow-observer

parameters:
  - name: BASE_IMAGE
    required: true
    value: quay.io/openshift/origin-cli
    description: >
      Base image containing the command line utilities suitable for interaction
      with the OpenShift cluster. It must contain at least oc and bash
      binaries.
  - description: >
      The tag of BASE_IMAGE to pull. The tag shall correspond to the OpenShift release of the cluster.
    name: BASE_IMAGE_TAG
    required: true
    value: "v3.11"
  - name: SDH_NAMESPACE
    description: >
      The name of the SAP Data Hub namespace to manage. Defaults to the current
      one. It must be set only in case the observer is running in a differnt
      namespace (see NAMESPACE).
  - name: NAMESPACE
    description: >
      The desired namespace, where the vflow observer shall run. Defaults to
      the current one. Needs to be set only if running the observer outside of
      SDH_NAMESPACE.
  - name: REGISTRY
    description: >
      The registry to mark as insecure. If not given, it will be determined from
      the installer-config secret in the SDH_NAMESPACE.
  - name: ROLE_BINDING_SUFFIX
    description: >
      A random suffix for the new RoleBinding's name. No need to edit.
    generate: expression
    from: '[a-z0-9]{5}'
